{"version":3,"sources":["components/Scoreboard.js","components/Header.js","components/Cards.js","App.js","reportWebVitals.js","index.js"],"names":["Scoreboard","props","streak","highestStreak","Header","gameOver","setGameOver","inst","className","gameOverMsg","onClick","e","Cards","setStreak","setHighestStreak","useState","clickedCards","setClickedCards","allCards","katakana","id","uniqid","cardClicked","findIndex","kana","target","textContent","concat","displayedCards","cards","i","length","j","Math","floor","random","temp","map","card","shuffleCards","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLASeA,EATI,SAACC,GAClB,OACE,gCACE,mDAAsBA,EAAMC,UAC5B,mDAAsBD,EAAME,qBC2BnBC,EA7BA,SAACH,GAAW,IACjBC,EAAiDD,EAAjDC,OAAQC,EAAyCF,EAAzCE,cAAeE,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,YAEnCC,EACJ,qBAAKC,UAAU,UAAf,0HAIIC,EACJ,sBAAKD,UAAU,UAAf,8DACmD,wBAAQE,QAAS,SAACC,GAAD,OAAOL,GAAY,IAApC,2BAIrD,OACE,mCACE,sBAAKE,UAAU,cAAf,UACE,gCACE,qBAAKA,UAAU,WAAf,sCACA,qBAAKA,UAAU,QAAf,yBAEF,cAAC,EAAD,CAAYN,OAAQA,EAAQC,cAAeA,OAG5CE,EAAWI,EAAcF,M,gBCsEjBK,EA7FD,SAACX,GAAW,IAChBC,EAA8ED,EAA9EC,OAAQW,EAAsEZ,EAAtEY,UAAWV,EAA2DF,EAA3DE,cAAeW,EAA4Cb,EAA5Ca,iBAAkBT,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,YAD/C,EAGiBS,mBAAS,IAH1B,mBAGhBC,EAHgB,KAGFC,EAHE,KAKjBC,EAAW,CACf,CAAEC,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,OACrB,CAAEF,SAAU,SAAKC,GAAIC,QAGjBC,EAAc,SAACX,GACIK,EAAaO,WAAU,SAACC,GAC7C,OAAOA,IAASb,EAAEc,OAAOC,eAGN,GACF,IAAbrB,IACFQ,EAAUX,EAAS,GACnBe,EAAgBD,EAAaW,OAAOhB,EAAEc,OAAOC,gBAG3CxB,EAASC,GACXW,EAAiBZ,GAEnBe,EAAgB,IAChBJ,EAAU,GACVP,GAAY,KAmBVsB,EAfe,SAACC,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAGb,OAAOP,EAAMQ,KAAI,SAACC,GAAD,OACf,qBAAmBlB,GAAIkB,EAAKlB,GAAIZ,UAAS,eAAUH,EAAW,MAAQ,MAAQK,QAASY,EAAvF,SACGgB,EAAKnB,UADEmB,EAAKlB,OAMImB,CAAarB,GAEpC,OAAO,qBAAKV,UAAU,QAAf,SAAwBoB,KCpElBY,EArBH,WAAO,IAAD,EACgBzB,oBAAS,GADzB,mBACTV,EADS,KACCC,EADD,OAEYS,mBAAS,GAFrB,mBAETb,EAFS,KAEDW,EAFC,OAG0BE,mBAAS,GAHnC,mBAGTZ,EAHS,KAGMW,EAHN,KAKhB,OACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,CAAQN,OAAQA,EAAQC,cAAeA,EAAeE,SAAUA,EAAUC,YAAaA,IAEvF,cAAC,EAAD,CACEJ,OAAQA,EACRW,UAAWA,EACXV,cAAeA,EACfW,iBAAkBA,EAClBT,SAAUA,EACVC,YAAaA,QCPNmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ef5e38df.chunk.js","sourcesContent":["const Scoreboard = (props) => {\n  return (\n    <div>\n      <div>Current streak: {props.streak}</div>\n      <div>Highest streak: {props.highestStreak}</div>\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import Scoreboard from './Scoreboard';\n\nconst Header = (props) => {\n  const { streak, highestStreak, gameOver, setGameOver } = props;\n\n  const inst = (\n    <div className=\"message\">\n      Memorize the cards you've already clicked on to get the highest streak. If you click a card twice, you lose.\n    </div>\n  );\n  const gameOverMsg = (\n    <div className=\"message\">\n      Game over! You clicked on that katakana already. <button onClick={(e) => setGameOver(false)}>Try again?</button>\n    </div>\n  );\n\n  return (\n    <header>\n      <div className=\"header-flex\">\n        <div>\n          <div className=\"jp-title\">メモカナ</div>\n          <div className=\"title\">memokana</div>\n        </div>\n        <Scoreboard streak={streak} highestStreak={highestStreak} />\n      </div>\n\n      {gameOver ? gameOverMsg : inst}\n    </header>\n  );\n};\n\nexport default Header;\n","import { useState } from 'react';\nimport uniqid from 'uniqid';\n\nconst Cards = (props) => {\n  const { streak, setStreak, highestStreak, setHighestStreak, gameOver, setGameOver } = props;\n\n  const [clickedCards, setClickedCards] = useState([]);\n\n  const allCards = [\n    { katakana: 'ア', id: uniqid() },\n    { katakana: 'イ', id: uniqid() },\n    { katakana: 'ウ', id: uniqid() },\n    { katakana: 'エ', id: uniqid() },\n    { katakana: 'オ', id: uniqid() },\n    { katakana: 'カ', id: uniqid() },\n    { katakana: 'キ', id: uniqid() },\n    { katakana: 'ク', id: uniqid() },\n    { katakana: 'ケ', id: uniqid() },\n    { katakana: 'コ', id: uniqid() },\n    { katakana: 'サ', id: uniqid() },\n    { katakana: 'シ', id: uniqid() },\n    { katakana: 'ス', id: uniqid() },\n    { katakana: 'セ', id: uniqid() },\n    { katakana: 'ソ', id: uniqid() },\n    { katakana: 'タ', id: uniqid() },\n    { katakana: 'チ', id: uniqid() },\n    { katakana: 'ツ', id: uniqid() },\n    { katakana: 'テ', id: uniqid() },\n    { katakana: 'ト', id: uniqid() },\n    { katakana: 'ナ', id: uniqid() },\n    { katakana: 'ニ', id: uniqid() },\n    { katakana: 'ヌ', id: uniqid() },\n    { katakana: 'ネ', id: uniqid() },\n    { katakana: 'ノ', id: uniqid() },\n    { katakana: 'ハ', id: uniqid() },\n    { katakana: 'ヒ', id: uniqid() },\n    { katakana: 'フ', id: uniqid() },\n    { katakana: 'ヘ', id: uniqid() },\n    { katakana: 'ホ', id: uniqid() },\n    { katakana: 'マ', id: uniqid() },\n    { katakana: 'ミ', id: uniqid() },\n    { katakana: 'ム', id: uniqid() },\n    { katakana: 'メ', id: uniqid() },\n    { katakana: 'モ', id: uniqid() },\n    { katakana: 'ヤ', id: uniqid() },\n    { katakana: 'ユ', id: uniqid() },\n    { katakana: 'ヨ', id: uniqid() },\n    { katakana: 'ラ', id: uniqid() },\n    { katakana: 'リ', id: uniqid() },\n    { katakana: 'ル', id: uniqid() },\n    { katakana: 'レ', id: uniqid() },\n    { katakana: 'ロ', id: uniqid() },\n    { katakana: 'ワ', id: uniqid() },\n    { katakana: 'ン', id: uniqid() },\n  ];\n\n  const cardClicked = (e) => {\n    const alreadyClicked = clickedCards.findIndex((kana) => {\n      return kana === e.target.textContent;\n    });\n\n    if (alreadyClicked < 0) {\n      if (gameOver === false) {\n        setStreak(streak + 1);\n        setClickedCards(clickedCards.concat(e.target.textContent));\n      }\n    } else {\n      if (streak > highestStreak) {\n        setHighestStreak(streak);\n      }\n      setClickedCards([]);\n      setStreak(0);\n      setGameOver(true);\n    }\n  };\n\n  const shuffleCards = (cards) => {\n    for (let i = 0; i < cards.length; i++) {\n      let j = Math.floor(Math.random() * (i + 1));\n      let temp = cards[i];\n      cards[i] = cards[j];\n      cards[j] = temp;\n    }\n\n    return cards.map((card) => (\n      <div key={card.id} id={card.id} className={`card ${gameOver ? 'off' : 'on'}`} onClick={cardClicked}>\n        {card.katakana}\n      </div>\n    ));\n  };\n\n  const displayedCards = shuffleCards(allCards);\n\n  return <div className=\"cards\">{displayedCards}</div>;\n};\n\nexport default Cards;\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Cards from './components/Cards';\n\nconst App = () => {\n  const [gameOver, setGameOver] = useState(false);\n  const [streak, setStreak] = useState(0);\n  const [highestStreak, setHighestStreak] = useState(0);\n\n  return (\n    <div className=\"App\">\n      <Header streak={streak} highestStreak={highestStreak} gameOver={gameOver} setGameOver={setGameOver} />\n\n      <Cards\n        streak={streak}\n        setStreak={setStreak}\n        highestStreak={highestStreak}\n        setHighestStreak={setHighestStreak}\n        gameOver={gameOver}\n        setGameOver={setGameOver}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}